     1                                  %include "../lib64.asm"
     2                              <1>          section .text     ; ������� ����
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                     section .data; сегмент инициализированных переменных
     3 00000000 496E70757420723A20-           Hello1Msg dq "Input r: "
     3 00000009 00000000000000     
     4                                        lenHello1 equ $-Hello1Msg
     5 00000010 496E70757420613A20-           Hello2Msg dq "Input a: "
     5 00000019 00000000000000     
     6                                        lenHello2 equ $-Hello2Msg
     7 00000020 496E70757420713A20-           Hello3Msg dq "Input q: "
     7 00000029 00000000000000     
     8                                        lenHello3 equ $-Hello3Msg
     9                                  
    10 00000030 526573756C743A20              ResMsg dq "Result: "
    11                                        lenRes equ $-ResMsg
    12                                  
    13                                     section .bss
    14 00000000 <res 50h>                     InBuf resq 10
    15                                        lenIn equ $-InBuf
    16 00000050 <res 50h>                     OutBuf resq 10
    17                                        lenOut equ $-OutBuf
    18 000000A0 ????????????????              r resq 1
    19 000000A8 ????????????????              a resq 1
    20 000000B0 ????????????????              q resq 1
    21 000000B8 ????????????????              S resq 1
    22                                  
    23                                     section .text ; сегмент кода
    24                                        global _start
    25                                  
    26                                  
    27                                  _start:
    28                                  ; input
    29                                     ; Output r
    30 000000A9 B801000000                    mov rax, 1; системная функция 1 (write)
    31 000000AE BF01000000                    mov rdi, 1; дескриптор файла stdout=1
    32 000000B3 48BE-                         mov rsi, Hello1Msg ; адрес выводимой строки
    32 000000B5 [0000000000000000] 
    33 000000BD BA10000000                    mov rdx, lenHello1 ; длина строки
    34 000000C2 0F05                          syscall; вызов системной функции
    35                                     ;end
    36                                  
    37                                     ; read data to InBuf
    38 000000C4 B800000000                    mov rax, 0; системная функция 0 (read)
    39 000000C9 BF00000000                    mov rdi, 0 ; дескриптор файла stdout=0
    40 000000CE 488D3425[00000000]            lea rsi, InBuf ; передаем указатель на буфер
    41 000000D6 BA50000000                    mov rdx, lenIn ; длина строки
    42 000000DB 0F05                          syscall
    43                                     ; end
    44                                  
    45                                     ; InBuf To string
    46 000000DD 48BE-                         mov RSI, InBuf
    46 000000DF [0000000000000000] 
    47 000000E7 E866FFFFFF                    call StrToInt64; Вход: ESI Выход: EAX, EBX содержит 0 if errors = 0
    48 000000EC 83FB00                        cmp EBX, 0
    49 000000EF 48890425[A0000000]            mov [r], RAX
    50                                     ; end
    51                                  
    52                                     ; Output a
    53 000000F7 B801000000                    mov rax, 1; системная функция 1 (write)
    54 000000FC BF01000000                    mov rdi, 1; дескриптор файла stdout=1
    55 00000101 48BE-                         mov rsi, Hello2Msg ; адрес выводимой строки
    55 00000103 [1000000000000000] 
    56 0000010B BA10000000                    mov rdx, lenHello2 ; длина строки
    57 00000110 0F05                          syscall; вызов системной функции
    58                                     ;end
    59                                  
    60                                     ; read data to InBuf
    61 00000112 B800000000                    mov rax, 0; системная функция 0 (read)
    62 00000117 BF00000000                    mov rdi, 0 ; дескриптор файла stdout=0
    63 0000011C 488D3425[00000000]            lea rsi, InBuf ; передаем указатель на буфер
    64 00000124 BA50000000                    mov rdx, lenIn ; длина строки
    65 00000129 0F05                          syscall
    66                                     ; end
    67                                  
    68                                     ; InBuf To string
    69 0000012B 48BE-                         mov RSI, InBuf
    69 0000012D [0000000000000000] 
    70 00000135 E818FFFFFF                    call StrToInt64; Вход: ESI Выход: EAX, EBX содержит 0 if errors = 0
    71 0000013A 83FB00                        cmp EBX, 0
    72 0000013D 48890425[A8000000]            mov [a], RAX
    73                                     ; end
    74                                  
    75                                     ; Output q
    76 00000145 B801000000                    mov rax, 1; системная функция 1 (write)
    77 0000014A BF01000000                    mov rdi, 1; дескриптор файла stdout=1
    78 0000014F 48BE-                         mov rsi, Hello3Msg ; адрес выводимой строки
    78 00000151 [2000000000000000] 
    79 00000159 BA10000000                    mov rdx, lenHello3 ; длина строки
    80 0000015E 0F05                          syscall; вызов системной функции
    81                                     ;end
    82                                  
    83                                     ; read data to InBuf
    84 00000160 B800000000                    mov rax, 0; системная функция 0 (read)
    85 00000165 BF00000000                    mov rdi, 0 ; дескриптор файла stdout=0
    86 0000016A 488D3425[00000000]            lea rsi, InBuf ; передаем указатель на буфер
    87 00000172 BA50000000                    mov rdx, lenIn ; длина строки
    88 00000177 0F05                          syscall
    89                                     ; end
    90                                  
    91                                     ; InBuf To string
    92 00000179 48BE-                         mov RSI, InBuf
    92 0000017B [0000000000000000] 
    93 00000183 E8CAFEFFFF                    call StrToInt64; Вход: ESI Выход: EAX, EBX содержит 0 if errors = 0
    94 00000188 83FB00                        cmp EBX, 0
    95 0000018B 48890425[B0000000]            mov [q], RAX
    96                                     ; end
    97                                  ; end
    98                                  
    99                                  
   100                                  ; Count result
   101 00000193 488B0425[A8000000]         mov RAX, [a]
   102 0000019B 48F7E8                     imul rax
   103 0000019E 488B1C25[A8000000]         mov RBX, [a]
   104 000001A6 48F7EB                     imul rbx
   105 000001A9 488B1C25[B0000000]         mov RBX, [q]
   106 000001B1 48F7FB                     idiv RBX
   107 000001B4 4889C3                     mov RBX, RAX; Сохранили третий рез-т в BX
   108 000001B7 488B0425[A8000000]         mov RAX, [a]
   109 000001BF 488B1425[B0000000]         mov RDX, [q]
   110 000001C7 48F7EA                     imul RDX
   111 000001CA BA02000000                 mov RDX, 2
   112 000001CF 48F7EA                     imul RDX
   113 000001D2 4829C3                     sub RBX, RAX
   114 000001D5 488B0425[A0000000]         mov RAX, [r]
   115 000001DD 48F7E8                     imul RAX
   116 000001E0 4801D8                     add RAX, RBX
   117 000001E3 48890425[B8000000]         mov [S], RAX; Success!
   118                                  ; end
   119                                  
   120                                  ; Result to string
   121 000001EB 48BE-                      mov rsi, OutBuf
   121 000001ED [5000000000000000] 
   122 000001F5 488B0425[B8000000]         mov rax, [S]
   123 000001FD 98                         cwde
   124 000001FE E8FDFDFFFF                 call IntToStr64
   125                                  ; end
   126                                  
   127                                  ; Output
   128 00000203 B801000000                 mov rax, 1; системная функция 1 (write)
   129 00000208 BF01000000                 mov rdi, 1; дескриптор файла stdout=1
   130 0000020D 48BE-                      mov rsi, ResMsg ; адрес выводимой строки
   130 0000020F [3000000000000000] 
   131 00000217 BA08000000                 mov rdx, lenRes ; длина строки
   132 0000021C 0F05                       syscall; вызов системной функции
   133                                  
   134 0000021E B801000000                 mov rax, 1; системная функция 1 (write)
   135 00000223 BF01000000                 mov rdi, 1; дескриптор файла stdout=1
   136 00000228 48BE-                      mov rsi, OutBuf ; адрес выводимой строки
   136 0000022A [5000000000000000] 
   137 00000232 BA50000000                 mov rdx, lenOut ; длина строки
   138 00000237 0F05                       syscall; вызов системной функции
   139                                  ;end
   140                                  
   141                                  ; close program
   142 00000239 B83C000000                 mov rax, 60; системная функция 60 (exit)
   143 0000023E 4831FF                     xor rdi, rdi; return code 0
   144 00000241 0F05                       syscall; вызов системной функции
   145                                  ; end
   146                                  
