     1                                  %include "../lib64.asm"
     2                              <1>          section .text     ; ������� ����
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  
     3                                  %define STDIN 0
     4                                  %define READ 0
     5                                  %define STDOUT 1
     6                                  %define WRITE 1
     7                                  %define EXIT 60
     8                                  
     9                                  %define ROWS 5
    10                                  %define COLUMNS 5
    11                                  %define ELEMENT_SIZE 4
    12                                  
    13                                  section .data
    14 00000000 0A                          NewLine db 0xA
    15 00000001 526573756C743A0A            ResultMsg db "Result:", 10
    16                                      ResultLen equ $-ResultMsg
    17                                  
    18 00000009 2020                        Space db "  "
    19                                      ; matrix dd 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5
    20 0000000B 010000000100000001-         matrix dd 1,1,1,1,-1, 2,-2,2,-2,2, 3,3,-3,3,3, 4,4,4,4,4, 5,5,5,5,5
    20 00000014 00000001000000FFFF-
    20 0000001D FFFF02000000FEFFFF-
    20 00000026 FF02000000FEFFFFFF-
    20 0000002F 020000000300000003-
    20 00000038 000000FDFFFFFF0300-
    20 00000041 000003000000040000-
    20 0000004A 000400000004000000-
    20 00000053 040000000400000005-
    20 0000005C 000000050000000500-
    20 00000065 000005000000050000-
    20 0000006E 00                 
    21                                  
    22                                  section .bss
    23                                  
    24 00000000 ????                        OutBuf resw 1
    25                                      lenOut equ $-OutBuf
    26                                  
    27                                  section .text
    28                                  global _start
    29                                  
    30                                  _start:
    31 000000A9 BA01000000                  mov rdx, 1
    32 000000AE B814000000                  mov rax, 20
    33 000000B3 B905000000                  mov rcx, ROWS
    34                                  check_el:
    35 000000B8 488B1C85[0B000000]          mov rbx, [matrix + ELEMENT_SIZE*rax]
    36 000000C0 83FB00                      cmp ebx, 0
    37 000000C3 7D04                        jge next
    38 000000C5 480FAFD3                    imul rdx, rbx
    39                                  next:
    40 000000C9 4883E804                    sub rax, 4
    41 000000CD E2E9                        loop check_el
    42                                  
    43 000000CF B80B000000                  mov rax, 11
    44 000000D4 891485[0B000000]            mov [matrix + ELEMENT_SIZE * rax], edx
    45                                  ; end of logic
    46                                  
    47                                  output:
    48 000000DB B801000000                  mov rax, WRITE
    49 000000E0 BF01000000                  mov rdi, STDOUT
    50 000000E5 48BE-                       mov rsi, ResultMsg
    50 000000E7 [0100000000000000] 
    51 000000EF BA08000000                  mov rdx, ResultLen
    52 000000F4 0F05                        syscall
    53                                  
    54 000000F6 B905000000                  mov rcx, ROWS
    55 000000FB 4831DB                      xor rbx, rbx; Обнуляем регистр
    56                                  output_row:
    57 000000FE 51                          push rcx
    58 000000FF B905000000                  mov rcx, COLUMNS
    59                                  output_column:
    60 00000104 51                          push rcx
    61 00000105 48BE-                       mov rsi, OutBuf
    61 00000107 [0000000000000000] 
    62 0000010F 488B049D[0B000000]          mov rax, [matrix + ELEMENT_SIZE * rbx]
    63 00000117 48FFC3                      inc rbx
    64 0000011A E8E1FEFFFF                  call IntToStr64
    65                                  
    66 0000011F B801000000                  mov rax, WRITE; системная функция 1 (write)
    67 00000124 BF01000000                  mov rdi, STDOUT; дескриптор файла stdout=1
    68 00000129 48BE-                       mov rsi, OutBuf ; адрес выводимой строки
    68 0000012B [0000000000000000] 
    69 00000133 BA02000000                  mov rdx, lenOut ; длина строки
    70 00000138 0F05                        syscall; вызов системной функции
    71                                  
    72 0000013A E82B000000                  call PrintSpace
    73                                  
    74 0000013F 59                          pop rcx
    75 00000140 E2C2                        loop output_column
    76                                  
    77 00000142 B801000000                  mov rax, WRITE; системная функция 1 (write)
    78 00000147 BF01000000                  mov rdi, STDOUT; дескриптор файла stdout=1
    79 0000014C 48BE-                       mov rsi, NewLine ; адрес выводимой строки
    79 0000014E [0000000000000000] 
    80 00000156 BA01000000                  mov rdx, 1 ; длина строки
    81 0000015B 0F05                        syscall; вызов системной функции
    82                                  
    83 0000015D 59                          pop rcx
    84 0000015E E29E                        loop output_row
    85                                  
    86                                  exit:
    87 00000160 4831FF                      xor rdi, rdi
    88 00000163 B83C000000                  mov rax, EXIT
    89 00000168 0F05                        syscall
    90                                  
    91                                  PrintSpace:    
    92 0000016A B801000000                  mov rax, 1
    93 0000016F BF01000000                  mov rdi, 1
    94 00000174 48BE-                       mov rsi, Space
    94 00000176 [0900000000000000] 
    95 0000017E BA01000000                  mov rdx, 1
    96 00000183 0F05                        syscall
    97 00000185 C3                          ret
