     1                                  %include "../lib64.asm"
     2                              <1>          section .text     ; ������� ����
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  
     3                                  %define STDIN 0
     4                                  %define READ 0
     5                                  %define STDOUT 1
     6                                  %define WRITE 1
     7                                  %define EXIT 60
     8                                  %define WORD_COUNT 7
     9                                  %define WORD_LENGTH 5
    10                                  
    11                                  section .data
    12 00000000 4F                          WRONG_CHAR db "O"
    13                                  
    14 00000001 456E74657220372077-         StartMsg db "Enter 7 words: "
    14 0000000A 6F7264733A20       
    15                                      StartLen equ $-StartMsg
    16 00000010 0A                          NewLine db 0xA
    17                                  
    18 00000011 526573756C743A20            ResultMsg db "Result: "
    19                                      ResultLen equ $-ResultMsg
    20                                  
    21                                  section .bss
    22 00000000 ??                          char resb 1
    23                                  
    24 00000001 <res 29h>                   OutBuf resb 41
    25                                      lenOut equ $-OutBuf
    26                                  
    27 0000002A <res 29h>                   InBuf resb 41
    28                                      lenIn equ $-InBuf
    29                                  
    30                                  
    31                                  section .text
    32                                  global _start
    33                                  
    34                                  _start:
    35 000000A9 B801000000                  mov rax, WRITE
    36 000000AE BF01000000                  mov rdi, STDOUT
    37 000000B3 48BE-                       mov rsi, StartMsg
    37 000000B5 [0100000000000000] 
    38 000000BD BA0F000000                  mov rdx, StartLen
    39 000000C2 0F05                        syscall
    40                                  
    41                                  ; OOOOO aOOOa bOOOs OadOO OOOOO asdcd asdac
    42                                  read_line:
    43 000000C4 B800000000                  mov rax, READ
    44 000000C9 BF00000000                  mov rdi, STDIN
    45 000000CE 48BE-                       mov rsi, InBuf
    45 000000D0 [2A00000000000000] 
    46 000000D8 BA29000000                  mov rdx, lenIn
    47 000000DD 0F05                        syscall
    48                                  ; logic
    49 000000DF 488D3C25[01000000]          lea rdi, OutBuf; Сохранять будем в буфер
    50 000000E7 B907000000                  mov rcx, WORD_COUNT
    51                                  check_word:
    52 000000EC 51                          push rcx
    53 000000ED 4831C0                      xor rax, rax; Обнуляем счетчик ошибок
    54 000000F0 B905000000                  mov rcx, WORD_LENGTH
    55                                      check_char:
    56 000000F5 803E4F                          cmp byte[rsi], 'O'
    57 000000F8 7503                            jne next_char
    58 000000FA 48FFC0                          inc rax
    59                                      next_char:
    60 000000FD 48FFC6                          inc rsi
    61 00000100 E2F3                            loop check_char
    62                                  
    63 00000102 48FFC6                      inc rsi; Скипаем пробел
    64 00000105 4883F803                    cmp rax, 3; Если ошибок больше трех
    65 00000109 7F0F                        jg next_word; То скипаем слово, иначе копирование
    66 0000010B 4883EE06                    sub rsi, 6; Возвращаемся на 6 символов назад
    67 0000010F B906000000                  mov rcx, 6; Считаем 6 раз
    68 00000114 F3A4                        rep movsb; Скопируем слово в буфер
    69 00000116 4883C206                    add rdx, 6; Увеличиваем сдвиг текущего буфера
    70                                  next_word:
    71 0000011A 59                          pop rcx
    72 0000011B E2CF                        loop check_word
    73                                  ; end logic
    74                                  
    75                                  output:
    76 0000011D B801000000                  mov rax, WRITE; системная функция 1 (write)
    77 00000122 BF01000000                  mov rdi, STDOUT; дескриптор файла stdout=1
    78 00000127 48BE-                       mov rsi, ResultMsg
    78 00000129 [1100000000000000] 
    79 00000131 BA08000000                  mov rdx, ResultLen ; длина строки
    80 00000136 0F05                        syscall; вызов системной функции
    81                                  
    82 00000138 B801000000                  mov rax, WRITE; системная функция 1 (write)
    83 0000013D BF01000000                  mov rdi, STDOUT; дескриптор файла stdout=1
    84 00000142 48BE-                       mov rsi, OutBuf ; адрес выводимой строки
    84 00000144 [0100000000000000] 
    85 0000014C BA29000000                  mov rdx, lenOut ; длина строки
    86 00000151 0F05                        syscall; вызов системной функции
    87                                  
    88                                  
    89 00000153 B801000000                  mov rax, WRITE; системная функция 1 (write)
    90 00000158 BF01000000                  mov rdi, STDOUT; дескриптор файла stdout=1
    91 0000015D 48BE-                       mov rsi, NewLine ; адрес выводимой строки
    91 0000015F [1000000000000000] 
    92 00000167 BA01000000                  mov rdx, 1 ; длина строки
    93 0000016C 0F05                        syscall; вызов системной функции
    94                                  
    95                                  exit:
    96 0000016E 4831FF                      xor rdi, rdi
    97 00000171 B83C000000                  mov rax, EXIT
    98 00000176 0F05                        syscall
    99                                  
