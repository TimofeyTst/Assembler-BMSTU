     1                                  %include "../lib64.asm"
     2                              <1>          section .text     ; сегмент кода
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; на место знака
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; расширили слово до двойного
    18 00000021 66F7F3              <1>          div    bx     ; делим результат на 10
    19 00000024 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; пишем символ в строку
    21 0000002A 48FFCF              <1>          dec    rdi    ; переводим указатель на  
    22                              <1>                        ; предыдущую позицию
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; длина результата+знак
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; длина результата+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; пропускаем знак
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; начало результата
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; сохраняем адрес исходной строки
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; пропускаем знак
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; обнуляем будущее число
    50 00000064 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
    51 00000065 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
    54 0000006B 722F                <1>          jb     .Error  ; "ниже" – Ошибка
    55 0000006D 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти 
    56 0000006F 772B                <1>          ja     .Error  ; "выше" – Ошибка
    57 00000071 2C30                <1>          sub    al, 30h ; получаем цифру из символа
    58 00000073 6698                <1>          cbw            ; расширяем до слова
    59 00000075 6650                <1>          push   ax      ; сохраняем в стеке
    60 00000077 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
    61 0000007B 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
    62 0000007E 665F                <1>          pop    di      ; в DI – очередная цифра
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; в DI – накопленное число        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                     section .data; СЃРµРіРјРµРЅС‚ РёРЅРёС†РёР°Р»РёР·РёСЂРѕРІР°РЅРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…
     3 00000000 0500000000000000        r dq 5
     4 00000008 0300000000000000        a dq 3
     5 00000010 0900000000000000        q dq 9
     6 00000018 3500000000000000        tsrt dq "5"
     7                                     section .bss
     8 00000000 <res 50h>               InBuf resq 10
     9 00000050 <res 50h>               OutBuf resq 10
    10                                  lenIn equ $-InBuf
    11 000000A0 ????????????????        A resq 1
    12 000000A8 ????????????????        S resq 1
    13                                     section .text ; СЃРµРіРјРµРЅС‚ РєРѕРґР°
    14                                     global _start
    15                                  _start:
    16                                  
    17                                     ; mov RSI, InBuf
    18 000000A9 48BE-                      mov RSI, tsrt
    18 000000AB [1800000000000000] 
    19 000000B3 E89AFFFFFF                 call StrToInt64; Р’С…РѕРґ: ESI Р’С‹С…РѕРґ: EAX, EBX СЃРѕРґРµСЂР¶РёС‚ 0 if errors = 0
    20 000000B8 83FB00                     cmp EBX, 0
    21 000000BB 48890425[A8000000]         mov [S], RAX
    22                                  
    23                                     ; cwde
    24                                     ; mov RBX, [q]
    25                                     ; idiv RBX
    26                                     ; cwde
    27                                     ; mov RBX, RAX; РЎРѕС…СЂР°РЅРёР»Рё С‚СЂРµС‚РёР№ СЂРµР·-С‚ РІ BX
    28                                     ; mov RAX, [a]
    29                                     ; mov RDX, [q]
    30                                     ; imul RDX
    31                                     ; mov RDX, 2
    32                                     ; imul RDX
    33                                     ; sub RBX, RAX
    34                                     ; mov RAX, [r]
    35                                     ; imul RAX
    36                                     ; add RAX, RBX
    37                                     ; mov [S], RAX; Success!
    38                                  
    39 000000C3 48BE-                      mov RSI, OutBuf
    39 000000C5 [5000000000000000] 
    40 000000CD 488B0425[A8000000]         mov RAX, [S]
    41 000000D5 98                         cwde
    42 000000D6 E825FFFFFF                 call IntToStr64
    43                                  
    44 000000DB B83C000000                 mov rax, 60; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 60 (exit)
    45 000000E0 4831FF                     xor rdi, rdi; return code 0
    46 000000E3 0F05                       syscall; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
