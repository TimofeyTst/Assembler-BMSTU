     1                                  %include "../lib64.asm"
     2                              <1>          section .text     ; ������� ����
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                     section .data; сегмент инициализированных переменных
     3 00000000 496E70757420613A20-           Hello1Msg dq "Input a: "
     3 00000009 00000000000000     
     4                                        lenHello1 equ $-Hello1Msg
     5 00000010 496E70757420783A20-           Hello2Msg dq "Input x: "
     5 00000019 00000000000000     
     6                                        lenHello2 equ $-Hello2Msg
     7 00000020 496E70757420623A20-           Hello3Msg dq "Input b: "
     7 00000029 00000000000000     
     8                                        lenHello3 equ $-Hello3Msg
     9 00000030 496E707574206A3A20-           Hello4Msg dq "Input j: "
     9 00000039 00000000000000     
    10                                        lenHello4 equ $-Hello4Msg
    11 00000040 4572726F7220776869-           ErrorSTIMsg dq "Error while transform str to int", 10
    11 00000049 6C65207472616E7366-
    11 00000052 6F726D207374722074-
    11 0000005B 6F20696E740A000000-
    11 00000064 00000000           
    12                                        lenErrorSTI equ $-ErrorSTIMsg
    13 00000068 5A65726F2044697669-           ZeroDivMsg dq "Zero Division Error", 10
    13 00000071 73696F6E204572726F-
    13 0000007A 7200000000000A0000-
    13 00000083 0000000000         
    14                                        lenZeroDiv equ $-ZeroDivMsg
    15                                  
    16 00000088 526573756C743A20              ResMsg dq "Result: "
    17                                        lenRes equ $-ResMsg
    18                                  
    19                                     section .bss
    20 00000000 <res 50h>                     InBuf resq 10
    21                                        lenIn equ $-InBuf
    22 00000050 <res 50h>                     OutBuf resq 10
    23                                        lenOut equ $-OutBuf
    24 000000A0 ????????????????              a resq 1
    25 000000A8 ????????????????              x resq 1
    26 000000B0 ????????????????              b resq 1
    27 000000B8 ????????????????              j resq 1
    28 000000C0 ????????????????              F resq 1
    29                                  
    30                                     section .text ; сегмент кода
    31                                        global _start
    32                                  
    33                                  
    34                                  _start:
    35                                  ; input
    36                                     ; Input a
    37 000000A9 B801000000                    mov rax, 1; системная функция 1 (write)
    38 000000AE BF01000000                    mov rdi, 1; дескриптор файла stdout=1
    39 000000B3 48BE-                         mov rsi, Hello1Msg ; адрес выводимой строки
    39 000000B5 [0000000000000000] 
    40 000000BD BA10000000                    mov rdx, lenHello1 ; длина строки
    41 000000C2 0F05                          syscall; вызов системной функции
    42                                     ;end
    43                                  
    44                                     ; read data to InBuf
    45 000000C4 B800000000                    mov rax, 0; системная функция 0 (read)
    46 000000C9 BF00000000                    mov rdi, 0 ; дескриптор файла stdout=0
    47 000000CE 488D3425[00000000]            lea rsi, InBuf ; передаем указатель на буфер
    48 000000D6 BA50000000                    mov rdx, lenIn ; длина строки
    49 000000DB 0F05                          syscall
    50                                     ; end
    51                                  
    52                                     ; InBuf To string
    53 000000DD 48BE-                         mov RSI, InBuf
    53 000000DF [0000000000000000] 
    54 000000E7 E866FFFFFF                    call StrToInt64; Вход: ESI Выход: EAX, EBX содержит 0 if errors = 0
    55 000000EC 83FB00                        cmp EBX, 0
    56 000000EF 0F8563010000                  jne .STIError
    57 000000F5 48890425[A0000000]            mov [a], RAX
    58                                     ; end
    59                                  
    60                                     ; Input x
    61 000000FD B801000000                    mov rax, 1; системная функция 1 (write)
    62 00000102 BF01000000                    mov rdi, 1; дескриптор файла stdout=1
    63 00000107 48BE-                         mov rsi, Hello2Msg ; адрес выводимой строки
    63 00000109 [1000000000000000] 
    64 00000111 BA10000000                    mov rdx, lenHello2 ; длина строки
    65 00000116 0F05                          syscall; вызов системной функции
    66                                     ;end
    67                                  
    68                                     ; read data to InBuf
    69 00000118 B800000000                    mov rax, 0; системная функция 0 (read)
    70 0000011D BF00000000                    mov rdi, 0 ; дескриптор файла stdout=0
    71 00000122 488D3425[00000000]            lea rsi, InBuf ; передаем указатель на буфер
    72 0000012A BA50000000                    mov rdx, lenIn ; длина строки
    73 0000012F 0F05                          syscall
    74                                     ; end
    75                                  
    76                                     ; InBuf To string
    77 00000131 48BE-                         mov RSI, InBuf
    77 00000133 [0000000000000000] 
    78 0000013B E812FFFFFF                    call StrToInt64; Вход: ESI Выход: EAX, EBX содержит 0 if errors = 0
    79 00000140 83FB00                        cmp EBX, 0
    80 00000143 0F850F010000                  jne .STIError
    81 00000149 48890425[A8000000]            mov [x], RAX
    82                                     ; end
    83                                  
    84                                     ; Input b
    85 00000151 B801000000                    mov rax, 1; системная функция 1 (write)
    86 00000156 BF01000000                    mov rdi, 1; дескриптор файла stdout=1
    87 0000015B 48BE-                         mov rsi, Hello3Msg ; адрес выводимой строки
    87 0000015D [2000000000000000] 
    88 00000165 BA10000000                    mov rdx, lenHello3 ; длина строки
    89 0000016A 0F05                          syscall; вызов системной функции
    90                                     ;end
    91                                  
    92                                     ; read data to InBuf
    93 0000016C B800000000                    mov rax, 0; системная функция 0 (read)
    94 00000171 BF00000000                    mov rdi, 0 ; дескриптор файла stdout=0
    95 00000176 488D3425[00000000]            lea rsi, InBuf ; передаем указатель на буфер
    96 0000017E BA50000000                    mov rdx, lenIn ; длина строки
    97 00000183 0F05                          syscall
    98                                     ; end
    99                                  
   100                                     ; InBuf To string
   101 00000185 48BE-                         mov RSI, InBuf
   101 00000187 [0000000000000000] 
   102 0000018F E8BEFEFFFF                    call StrToInt64; Вход: ESI Выход: EAX, EBX содержит 0 if errors = 0
   103 00000194 83FB00                        cmp EBX, 0
   104 00000197 0F85BB000000                  jne .STIError
   105 0000019D 48890425[B0000000]            mov [b], RAX
   106                                     ; end
   107                                  
   108                                     ; Input j
   109 000001A5 B801000000                    mov rax, 1; системная функция 1 (write)
   110 000001AA BF01000000                    mov rdi, 1; дескриптор файла stdout=1
   111 000001AF 48BE-                         mov rsi, Hello4Msg ; адрес выводимой строки
   111 000001B1 [3000000000000000] 
   112 000001B9 BA10000000                    mov rdx, lenHello4 ; длина строки
   113 000001BE 0F05                          syscall; вызов системной функции
   114                                     ;end
   115                                  
   116                                     ; read data to InBuf
   117 000001C0 B800000000                    mov rax, 0; системная функция 0 (read)
   118 000001C5 BF00000000                    mov rdi, 0 ; дескриптор файла stdout=0
   119 000001CA 488D3425[00000000]            lea rsi, InBuf ; передаем указатель на буфер
   120 000001D2 BA50000000                    mov rdx, lenIn ; длина строки
   121 000001D7 0F05                          syscall
   122                                     ; end
   123                                  
   124                                     ; InBuf To string
   125 000001D9 48BE-                         mov RSI, InBuf
   125 000001DB [0000000000000000] 
   126 000001E3 E86AFEFFFF                    call StrToInt64; Вход: ESI Выход: EAX, EBX содержит 0 if errors = 0
   127 000001E8 83FB00                        cmp EBX, 0
   128 000001EB 756B                          jne .STIError
   129 000001ED 48890425[B8000000]            mov [j], RAX
   130                                     ; end
   131 000001F5 EB00                          jmp .countResult
   132                                  ; end
   133                                  
   134                                  .countResult:
   135 000001F7 488B0425[B8000000]         mov rax, [j]
   136 000001FF 4883F805                   cmp rax, 5
   137 00000203 7F42                       jg .jtrue
   138 00000205 488B0425[B0000000]         mov rax, [b]
   139 0000020D 4883F805                   cmp rax, 5
   140 00000211 7462                       je .ZeroDivError
   141 00000213 488B0425[A8000000]         mov rax, [x]
   142 0000021B 488B1C25[A0000000]         mov rbx, [a]
   143 00000223 48F7EB                     imul rbx
   144 00000226 BB03000000                 mov rbx, 3
   145 0000022B 48F7EB                     imul rbx
   146 0000022E 488B1C25[B0000000]         mov rbx, [b]
   147 00000236 4883EB05                   sub rbx, 5
   148 0000023A 48F7FB                     idiv rbx
   149 0000023D 48890425[C0000000]         mov [F], rax
   150 00000245 EB4B                       jmp .output
   151                                  
   152                                  .jtrue:
   153 00000247 48C7C0F4FFFFFF             mov rax, -12
   154 0000024E 48890425[C0000000]         mov [F], rax
   155 00000256 EB3A                       jmp .output
   156                                  
   157                                  ; end
   158                                  
   159                                  .STIError:
   160 00000258 B801000000                    mov rax, 1; системная функция 1 (write)
   161 0000025D BF01000000                    mov rdi, 1; дескриптор файла stdout=1
   162 00000262 48BE-                         mov rsi, ErrorSTIMsg ; адрес выводимой строки
   162 00000264 [4000000000000000] 
   163 0000026C BA28000000                    mov rdx, lenErrorSTI ; длина строки
   164 00000271 0F05                          syscall; вызов системной функции
   165 00000273 EB6D                          jmp .end
   166                                     ;end
   167                                  
   168                                  .ZeroDivError:
   169 00000275 B801000000                    mov rax, 1; системная функция 1 (write)
   170 0000027A BF01000000                    mov rdi, 1; дескриптор файла stdout=1
   171 0000027F 48BE-                         mov rsi, ZeroDivMsg ; адрес выводимой строки
   171 00000281 [6800000000000000] 
   172 00000289 BA20000000                    mov rdx, lenZeroDiv ; длина строки
   173 0000028E 0F05                          syscall; вызов системной функции
   174 00000290 EB50                          jmp .end
   175                                     ;end
   176                                  
   177                                  .output:
   178                                  ; Output
   179                                     ; Result to string
   180 00000292 48BE-                         mov rsi, OutBuf
   180 00000294 [5000000000000000] 
   181 0000029C 488B0425[C0000000]            mov rax, [F]
   182 000002A4 98                            cwde
   183 000002A5 E856FDFFFF                    call IntToStr64
   184                                     ; end
   185 000002AA B801000000                 mov rax, 1; системная функция 1 (write)
   186 000002AF BF01000000                 mov rdi, 1; дескриптор файла stdout=1
   187 000002B4 48BE-                      mov rsi, ResMsg ; адрес выводимой строки
   187 000002B6 [8800000000000000] 
   188 000002BE BA08000000                 mov rdx, lenRes ; длина строки
   189 000002C3 0F05                       syscall; вызов системной функции
   190                                  
   191 000002C5 B801000000                 mov rax, 1; системная функция 1 (write)
   192 000002CA BF01000000                 mov rdi, 1; дескриптор файла stdout=1
   193 000002CF 48BE-                      mov rsi, OutBuf ; адрес выводимой строки
   193 000002D1 [5000000000000000] 
   194 000002D9 BA50000000                 mov rdx, lenOut ; длина строки
   195 000002DE 0F05                       syscall; вызов системной функции
   196 000002E0 EB00                       jmp .end
   197                                  ;end
   198                                  
   199                                  .end:
   200                                  ; close program
   201 000002E2 B83C000000                 mov rax, 60; системная функция 60 (exit)
   202 000002E7 4831FF                     xor rdi, rdi; return code 0
   203 000002EA 0F05                       syscall; вызов системной функции
   204                                  ; end
   205                                  
